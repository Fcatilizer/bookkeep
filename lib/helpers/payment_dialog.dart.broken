import 'package:flutter/material.dart';
import '../models/payment.dart';
import '../models/customer_event.dart';
import '../services/payment_service.dart';
import '../services/customer_event_service.dart';

class PaymentDialog {
  static void showAddPaymentDialog(BuildContext context) async {
    _showPaymentDialog(context, null);
  }

  static void showEditPaymentDialog(
    BuildContext context,
    Payment payment,
  ) async {
    _showPaymentDialog(context, payment);
  }

  static void _showPaymentDialog(BuildContext context, Payment? payment) async {
    final PaymentService paymentService = PaymentService();
    final CustomerEventService customerEventService = CustomerEventService();

    // Load customer events for dropdowns
    final customerEvents = await customerEventService.getAllCustomerEvents();

    if (customerEvents.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text(
            'Please add customer events first before creating payments',
          ),
          backgroundColor: Colors.orange,
        ),
      );
      return;
    }

    // Generate the payment ID automatically (only for new payments)
    final generatedPaymentId =
        payment?.paymentId ?? await paymentService.generatePaymentId();

    final payingPersonController = TextEditingController();
    final amountController = TextEditingController();
    final referenceController = TextEditingController();
    final notesController = TextEditingController();

    CustomerEvent? selectedCustomerEvent;
    String selectedPaymentType = 'cash';
    String selectedStatus = 'pending';
    DateTime selectedDate = DateTime.now();

    // Initialize with existing payment data if editing
    if (payment != null) {
      payingPersonController.text = payment.payingPersonName;
      amountController.text = payment.amount.toString();
      referenceController.text = payment.reference ?? '';
      notesController.text = payment.notes ?? '';
      selectedPaymentType = payment.paymentType;
      selectedStatus = payment.status;
      selectedDate = payment.paymentDate;
      // Find the customer event
      selectedCustomerEvent = customerEvents.firstWhere(
        (event) => event.eventNo == payment.customerEventNo,
        orElse: () => customerEvents.first,
      );
    }

    // Helper functions for reference field based on payment type
    String getReferenceFieldLabel(String paymentType) {
      switch (paymentType) {
        case 'upi':
          return 'UPI ID/Phone No';
        case 'bank_transfer':
          return 'Bank Account No';
        case 'cheque':
          return 'Cheque No';
        case 'card':
        case 'netbanking':
          return 'Ref No';
        default:
          return 'Reference';
      }
    }

    IconData getReferenceFieldIcon(String paymentType) {
      switch (paymentType) {
        case 'upi':
          return Icons.phone_android;
        case 'bank_transfer':
          return Icons.account_balance;
        case 'cheque':
          return Icons.receipt_long;
        case 'card':
        case 'netbanking':
          return Icons.credit_card;
        default:
          return Icons.receipt;
      }
    }

    String getReferenceFieldHelper(String paymentType) {
      switch (paymentType) {
        case 'upi':
          return 'Enter UPI ID or registered phone number';
        case 'bank_transfer':
          return 'Enter destination bank account number';
        case 'cheque':
          return 'Enter cheque number';
        case 'card':
          return 'Enter card transaction reference number';
        case 'netbanking':
          return 'Enter net banking transaction reference';
        default:
          return 'Enter transaction reference';
      }
    }

    IconData getPaymentTypeIcon(String type) {
      switch (type) {
        case 'cash':
          return Icons.money;
        case 'card':
          return Icons.credit_card;
        case 'bank_transfer':
          return Icons.account_balance;
        case 'upi':
          return Icons.phone_android;
        case 'cheque':
          return Icons.receipt_long;
        case 'netbanking':
          return Icons.computer;
        default:
          return Icons.payment;
      }
    }

    Color getPaymentTypeColor(String type) {
      switch (type) {
        case 'cash':
          return Colors.green;
        case 'card':
          return Colors.blue;
        case 'bank_transfer':
          return Colors.purple;
        case 'upi':
          return Colors.orange;
        case 'cheque':
          return Colors.brown;
        case 'netbanking':
          return Colors.teal;
        default:
          return Colors.grey;
      }
    }

    showDialog(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setState) => AlertDialog(
          title: Text(payment == null ? 'Add New Payment' : 'Edit Payment'),
          content: Container(
            width: MediaQuery.of(context).size.width * 0.9,
            height: MediaQuery.of(context).size.height * 0.8,
            child: SingleChildScrollView(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                    // Show generated payment ID
                    Container(
                      width: double.infinity,
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: Theme.of(
                          context,
                        ).colorScheme.primaryContainer.withOpacity(0.3),
                        borderRadius: BorderRadius.circular(8),
                        border: Border.all(
                          color: Theme.of(context).colorScheme.outline,
                        ),
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Payment ID (Auto-generated)',
                            style: Theme.of(context).textTheme.bodySmall
                                ?.copyWith(
                                  color: Theme.of(
                                    context,
                                  ).colorScheme.onSurfaceVariant,
                                  fontWeight: FontWeight.w500,
                                ),
                          ),
                          const SizedBox(height: 4),
                          Text(
                            generatedPaymentId,
                            style: Theme.of(context).textTheme.titleMedium
                                ?.copyWith(
                                  color: Theme.of(
                                    context,
                                  ).colorScheme.onPrimaryContainer,
                                  fontWeight: FontWeight.bold,
                                ),
                          ),
                        ],
                      ),
                    ),
                    const SizedBox(height: 16),

                    // Customer Event Dropdown
                    DropdownButtonFormField<CustomerEvent>(
                      value: selectedCustomerEvent,
                      decoration: const InputDecoration(
                        labelText: 'Customer Event *',
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Icons.event),
                        helperText:
                            'Select the customer event for this payment',
                      ),
                      hint: const Text('Select Customer Event'),
                      isExpanded: true,
                      items: customerEvents
                          .map(
                            (event) => DropdownMenuItem<CustomerEvent>(
                              value: event,
                              child: Text(
                                '${event.eventNo} - ${event.customerName} (${event.eventName}) - â‚¹${event.agreedAmount.toStringAsFixed(2)}',
                                style: const TextStyle(fontSize: 14),
                                overflow: TextOverflow.ellipsis,
                              ),
                            ),
                          )
                          .toList(),
                      onChanged: (CustomerEvent? value) {
                        setState(() {
                          selectedCustomerEvent = value;
                        });
                      },
                      validator: (value) {
                        if (value == null) {
                          return 'Please select a customer event';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 16),

                    // Payment/Paying Person
                    TextFormField(
                      controller: payingPersonController,
                      decoration: const InputDecoration(
                        labelText: 'Payment/Paying Person *',
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Icons.person),
                        helperText:
                            'Enter the name of the person making payment',
                      ),
                      validator: (value) {
                        if (value?.isEmpty == true) {
                          return 'Please enter paying person name';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 16),

                    // Payment Type Selection with Chips
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          'Payment Type *',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                        const SizedBox(height: 8),
                        Wrap(
                          spacing: 8,
                          runSpacing: 8,
                          children: Payment.paymentTypes.map((type) {
                            final isSelected = selectedPaymentType == type;
                            return FilterChip(
                              label: Row(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  Icon(
                                    getPaymentTypeIcon(type),
                                    size: 16,
                                    color: isSelected
                                        ? Colors.white
                                        : getPaymentTypeColor(type),
                                  ),
                                  const SizedBox(width: 4),
                                  Text(Payment.getPaymentTypeDisplayName(type)),
                                ],
                              ),
                              selected: isSelected,
                              onSelected: (selected) {
                                if (selected) {
                                  setState(() {
                                    selectedPaymentType = type;
                                    // Clear reference field when payment type changes
                                    referenceController.clear();
                                  });
                                }
                              },
                              backgroundColor: getPaymentTypeColor(
                                type,
                              ).withOpacity(0.1),
                              selectedColor: getPaymentTypeColor(type),
                              checkmarkColor: Colors.white,
                            );
                          }).toList(),
                        ),
                      ],
                    ),
                    const SizedBox(height: 16),

                    // Amount Paid Field
                    TextField(
                      controller: amountController,
                      decoration: const InputDecoration(
                        labelText: 'Amount Paid *',
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Icons.currency_rupee),
                        helperText: 'Enter the payment amount',
                      ),
                      keyboardType: const TextInputType.numberWithOptions(
                        decimal: true,
                      ),
                    ),
                    const SizedBox(height: 16),

                    // Payment Status Dropdown
                    DropdownButtonFormField<String>(
                      value: selectedStatus,
                      decoration: const InputDecoration(
                        labelText: 'Payment Status *',
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Icons.check_circle),
                        helperText: 'Select the status of this payment',
                      ),
                      items: Payment.paymentStatuses
                          .map(
                            (status) => DropdownMenuItem<String>(
                              value: status,
                              child: Text(Payment.getStatusDisplayName(status)),
                            ),
                          )
                          .toList(),
                      onChanged: (String? value) {
                        setState(() {
                          selectedStatus = value ?? 'pending';
                        });
                      },
                    ),
                    const SizedBox(height: 16),

                    // Conditional Reference Field based on Payment Type
                    if (selectedPaymentType != 'cash') ...[
                      TextField(
                        controller: referenceController,
                        decoration: InputDecoration(
                          labelText: getReferenceFieldLabel(
                            selectedPaymentType,
                          ),
                          border: const OutlineInputBorder(),
                          prefixIcon: Icon(
                            getReferenceFieldIcon(selectedPaymentType),
                          ),
                          helperText: getReferenceFieldHelper(
                            selectedPaymentType,
                          ),
                        ),
                      ),
                      const SizedBox(height: 16),
                    ],

                    // Date of Payment
                    ListTile(
                      leading: const Icon(Icons.calendar_today),
                      title: Text(
                        'Date of Payment: ${selectedDate.day}/${selectedDate.month}/${selectedDate.year}',
                      ),
                      onTap: () async {
                        final DateTime? picked = await showDatePicker(
                          context: context,
                          initialDate: selectedDate,
                          firstDate: DateTime(2020),
                          lastDate: DateTime.now(),
                        );
                        if (picked != null && picked != selectedDate) {
                          setState(() {
                            selectedDate = picked;
                          });
                        }
                      },
                    ),
                    const SizedBox(height: 16),

                    // Notes Field
                    TextField(
                      controller: notesController,
                      decoration: const InputDecoration(
                        labelText: 'Notes',
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Icons.note),
                        helperText: 'Additional notes about this payment',
                      ),
                      maxLines: 3,
                    ),
                  ],
                ),
              ),
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('Cancel'),
            ),
            FilledButton(
              onPressed: () async {
                final amountText = amountController.text.trim();

                // Validation
                if (selectedCustomerEvent == null) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                      content: Text('Please select a customer event'),
                    ),
                  );
                  return;
                }

                final payingPersonName = payingPersonController.text.trim();
                if (payingPersonName.isEmpty) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                      content: Text('Please enter paying person name'),
                    ),
                  );
                  return;
                }

                final amount = double.tryParse(amountText);
                if (amount == null || amount <= 0) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                      content: Text(
                        'Please enter a valid amount greater than 0',
                      ),
                    ),
                  );
                  return;
                }

                final newPayment = Payment(
                  paymentId: generatedPaymentId,
                  customerEventNo: selectedCustomerEvent!.eventNo,
                  payingPersonName: payingPersonName,
                  paymentType: selectedPaymentType,
                  amount: amount,
                  status: selectedStatus,
                  reference: referenceController.text.trim().isNotEmpty
                      ? referenceController.text.trim()
                      : null,
                  notes: notesController.text.trim().isNotEmpty
                      ? notesController.text.trim()
                      : null,
                  paymentDate: selectedDate,
                  createdAt: payment?.createdAt ?? DateTime.now(),
                  updatedAt: payment != null ? DateTime.now() : null,
                );

                try {
                  final bool success;
                  if (payment == null) {
                    // Create new payment
                    success = await paymentService.createPayment(newPayment);
                  } else {
                    // Update existing payment
                    success = await paymentService.updatePayment(newPayment);
                  }

                  if (context.mounted) {
                    Navigator.pop(context);
                    if (success) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text(
                            payment == null
                                ? 'Payment of â‚¹${amount.toStringAsFixed(2)} by $payingPersonName recorded successfully!'
                                : 'Payment of â‚¹${amount.toStringAsFixed(2)} by $payingPersonName updated successfully!',
                          ),
                          backgroundColor: Colors.green,
                        ),
                      );
                    } else {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text(
                            payment == null
                                ? 'Failed to record payment. Please try again.'
                                : 'Failed to update payment. Please try again.',
                          ),
                          backgroundColor: Colors.red,
                        ),
                      );
                    }
                  }
                } catch (e) {
                  if (context.mounted) {
                    Navigator.pop(context);
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                        content: Text('Error: $e'),
                        backgroundColor: Colors.red,
                      ),
                    );
                  }
                }
              },
              child: Text(
                payment == null ? 'Record Payment' : 'Update Payment',
              ),
            ),
          ],
        ),
      ),
    );
  }
}
